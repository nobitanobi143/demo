 abstractclassCar{
 publicCar(CarTypemodel){
 this.model=model;
 arrangeParts();
 }
 privatevoidarrangeParts(){
 //Doonetimeprocessinghere
 }
 //Dosubclasslevelprocessinginthismethod
 protectedabstractvoidconstruct();
 privateCarTypemodel=null;
 publicCarTypegetModel(){
 returnmodel;
 }
 publicvoidsetModel(CarTypemodel){
 this.model=model;
 }
 }
 classCarFactory{
 publicstaticCarbuildCar(CarTypemodel){
 Carcar=null;
 switch(model){
 caseSMALL:
 car=newSmallCar();
 break;
 caseSEDAN:
 car=newSedanCar();
 break;
 caseLUXURY:
car=newLuxuryCar();
 break;
 default:
 //throwsomeexception
 break;
 }
 returncar;
 }
 }
 enumCarType{
 SMALL,SEDAN,LUXURY
 }
 classLuxuryCarextendsCar{
 LuxuryCar(){
 super(CarType.LUXURY);
 construct();
 }
 @Override
 protectedvoidconstruct(){
 System.out.println("Buildingluxurycar");
 //addaccessories
 }
 }
 classSedanCarextendsCar{
 SedanCar(){
 super(CarType.SEDAN);
 construct();
 }
 @Override
 protectedvoidconstruct(){
 System.out.println("Buildingsedancar");
 //addaccessories
 }
 }
 classSmallCarextendsCar{
 SmallCar(){
 super(CarType.SMALL);
 construct();
 }
 @Override
 protectedvoidconstruct(){
 System.out.println("Buildingsmallcar");
 //addaccessories
 }
 }
 classTestFactoryPattern{
 publicstaticvoidmain(String[]args){
System.out.println(CarFactory.buildCar(CarType.SMALL));
 System.out.println(CarFactory.buildCar(CarType.SEDAN));
 System.out.println(CarFactory.buildCar(CarType.LUXURY));
 }
 }
